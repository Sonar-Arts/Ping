Refactor Plan for Pong Game

1. Use a fixed time step for game logic updates:
   - Define a fixed time step (e.g., 1/60th of a second) for game logic updates.
   - Accumulate the elapsed time and update the game logic in fixed time steps.
   - This ensures that the game logic runs at a consistent rate, regardless of the frame rate.

2. Separate rendering from game logic:
   - Allow the rendering to run as fast as possible, independent of the game logic updates.
   - This ensures smooth rendering while keeping the game logic updates consistent.

3. Modify the main game loop:
   - Replace the current frame rate-based game loop with a fixed time step loop.
   - Accumulate the elapsed time and update the game logic in fixed time steps.
   - Render the game state after updating the game logic.

4. Update the movement and collision logic:
   - Ensure that the movement and collision logic use the fixed time step for calculations.
   - This ensures consistent behavior regardless of the frame rate.

5. Implement a proper pausing system:
   - Add a pause flag to control the game's paused state.
   - Modify the main game loop to check the pause flag and skip game logic updates when the game is paused.
   - Add a key event (e.g., the ESC key) to toggle the pause state.
   - Ensure the rendering continues to display the pause menu or paused state indicator when the game is paused.

By implementing these changes, the game's activity will no longer be tied to the frames generated, resulting in a more consistent and reliable gameplay experience. Additionally, the game will have a proper pausing system that allows players to pause and resume the game smoothly.